#pragma once

// Code for managing reads/writes to reservoirs

struct RTXGI_PackedReservoir
{
	// Internal compressed GI sample data
	uint4 CreationGeometry;
	uint4 HitGeometry;
	uint4 LightInfo;
};

RWStructuredBuffer<RTXGI_PackedReservoir> RWGIReservoirUAV;
uint3 ReservoirBufferDim;

RWStructuredBuffer<RTXGI_PackedReservoir> RWGIReservoirHistoryUAV;
StructuredBuffer<RTXGI_PackedReservoir> GIReservoirHistory;
uint3 ReservoirHistoryBufferDim;

uint ComputeReservoirAddress(int2 PixelCoord, int Slice, uint3 BufferDim)
{
	static const uint TileSize = 4;
	const uint RowStride = (BufferDim.x / TileSize) * TileSize * TileSize;

	int2 Tile = PixelCoord / TileSize;
	int2 TileCoord = PixelCoord % TileSize;

	uint Address = Slice * BufferDim.x * BufferDim.y; 
	Address += Tile.y * RowStride;
	Address += Tile.x * TileSize * TileSize;
	Address += TileCoord.y * TileSize + TileCoord.x;

	return Address;
}

RTXGI_PackedReservoir ReadReservoirData(int2 PixelCoord, int Slice)
{
	uint Address = ComputeReservoirAddress(PixelCoord, Slice, ReservoirBufferDim) ;
	return RWGIReservoirUAV[Address];
}

RTXGI_PackedReservoir ReadReservoirHistoryData(int2 PixelCoord, int Slice)
{
	uint Address = ComputeReservoirAddress(PixelCoord, Slice, ReservoirHistoryBufferDim) ;
	return GIReservoirHistory[Address];
}

void WriteReservoirData(int2 PixelCoord, int Slice,in RTXGI_PackedReservoir Value)
{
	uint Address = ComputeReservoirAddress(PixelCoord, Slice, ReservoirBufferDim) ;
	RWGIReservoirUAV[Address] = Value; //0
}

void WriteReservoirHistoryData(int2 PixelCoord, int Slice,in RTXGI_PackedReservoir Value)
{
	uint Address = ComputeReservoirAddress(PixelCoord, Slice, ReservoirHistoryBufferDim) ;

	RWGIReservoirHistoryUAV[Address] = Value;
}

uint2 PackIrradiance(float3 Irradiance, float M)
{
	uint2 Packed = (uint2)0;

	// Note: Consider keeping Lumiance(Y) in full range
	Packed.x = f32tof16(Irradiance.x) | (f32tof16(Irradiance.y) << 16);
	Packed.y = f32tof16(Irradiance.z) | (f32tof16(M) << 16);
	return Packed;
}

void UnpackIrradiance(uint2 Irradiance, out float3 Unpacked, out float M)
{
	Unpacked.x = f16tof32(Irradiance.x & 0xffff);
	Unpacked.y = f16tof32(Irradiance.x >> 16);
	Unpacked.z = f16tof32(Irradiance.y & 0xffff);
	M          = f16tof32(Irradiance.y >> 16);
}

uint PackNormal(float3 Normal)
{
	float alpha = 0;
	if ((Normal.x != 0 || Normal.y != 0))
	{
		alpha = atan2(Normal.y, Normal.x);
	}
	return f32tof16(alpha) | (f32tof16(Normal.z) << 16);
}

float3 UnpackNormal(uint PackedNormal)
{
	float z = f16tof32(PackedNormal >> 16);
	float alpha = f16tof32(PackedNormal & 0xffff);
	float r = sqrt(abs(1 - z * z));
	return float3(cos(alpha) * r, sin(alpha) * r, z);
}


struct RTXGI_SampleRef
{
	// Internal compressed GI sample data
	float3 CreationPoint;
	float3 CreationNormal;
	float3 Position;
	float3 Normal;
	float3 Irradiance;
	uint   Valid;

	bool IsValid()
	{
		return Valid > 0;
	}

	static RTXGI_SampleRef Invalid()
	{
		RTXGI_SampleRef s = (RTXGI_SampleRef)0;
		s.Valid = 0;
		s.Irradiance = 0;
		
		s.CreationPoint = 0;
		s.CreationNormal = 0;
		s.Position = 0;
		s.Normal = 0;
		return s;
	}

	static RTXGI_SampleRef Create(float3 samPos, float3 samNormal, float3 visPos, float3 visNormal)
	{
		RTXGI_SampleRef s;
		s.CreationPoint = visPos;
		s.CreationNormal = visNormal;
		s.Position = samPos;
		s.Normal = samNormal;
		s.Valid = 1;
		return s;
	}
};

// Use 24-bit unsigned float to enable extra precision and keep the reservior in a single 128-bit quantity
#define CUSTOM_FLOAT 1

struct RTXGI_Reservoir
{
	static const uint MaxM = 0xffff;

	RTXGI_SampleRef sampleRef;
	float weightSum;
	float targetPdf;
	uint M;

	static RTXGI_Reservoir Empty()
	{
		RTXGI_Reservoir s;
		s.sampleRef = RTXGI_SampleRef::Invalid();
		s.targetPdf = 0;
		s.weightSum = 0;
		s.M = 0;
		return s;
	}

	static RTXGI_Reservoir Load(RTXGI_PackedReservoir data)
	{
		RTXGI_Reservoir res;
		uint4 CreationGeometry = data.CreationGeometry;
		res.sampleRef.CreationPoint = asfloat(CreationGeometry.xyz);
		res.sampleRef.CreationNormal = UnpackNormal(CreationGeometry.w);

		uint4 HitGeometry = data.HitGeometry;
		res.sampleRef.Position = asfloat(HitGeometry.xyz);
		res.sampleRef.Normal = UnpackNormal(HitGeometry.w);

		uint4 LightInfo = data.LightInfo;
		UnpackIrradiance(LightInfo.xy, res.sampleRef.Irradiance, res.M);
		res.sampleRef.Valid = res.M ;

		res.weightSum = asfloat(LightInfo.z );
		res.targetPdf = asfloat(LightInfo.w);

		// Discard reservoirs that have Inf/NaN
		if (isinf(res.weightSum) || isnan(res.weightSum)) {
			res = Empty();
		}

		return res;
	}

	RTXGI_PackedReservoir Store()
	{
		RTXGI_PackedReservoir data;
		uint4 CreationGeometry;
		CreationGeometry.xyz = asuint(sampleRef.CreationPoint);
		CreationGeometry.w = PackNormal(sampleRef.CreationNormal);
		data.CreationGeometry = CreationGeometry;

		uint4 HitGeometry;
		HitGeometry.xyz = asuint(sampleRef.Position);
		HitGeometry.w = PackNormal(sampleRef.Normal);
		data.HitGeometry = HitGeometry;

		uint4 LightInfo;
		LightInfo.xy = PackIrradiance(sampleRef.Irradiance, M);
		LightInfo.z = asuint(weightSum);
		LightInfo.w = asuint(targetPdf);
		data.LightInfo = LightInfo;
		
		return data;
	}

	void FinalizeResampling(float normalizationNumerator, float normalizationDenominator)
	{
		float denominator = targetPdf * normalizationDenominator;

		weightSum = (denominator == 0.0) ? 0.0 : (weightSum * normalizationNumerator) / denominator;
	}

	bool StreamSample(RTXGI_SampleRef newSampleRef, float random, float newTargetPdf, float invSourcePdf)
	{
		// What's the current weight
		float risWeight = newTargetPdf * invSourcePdf;

		// Add one sample to the counter
		M += 1;

		// Update the weight sum
		weightSum += risWeight;

		// Decide if we will randomly pick this sample
		bool selectSample = (random * weightSum <= risWeight);

		// If we did select this sample, update the relevant data.
		// New samples don't have visibility or age information, we can skip that.
		if (selectSample)
		{
			sampleRef = newSampleRef;
			targetPdf = newTargetPdf;
		}

		return selectSample;
	}

	bool CombineReservoirs(RTXGI_Reservoir newReservoir, float random, float newTargetPdf)
	{
		// What's the current weight (times any prior-step RIS normalization factor)
		float risWeight = newTargetPdf * newReservoir.weightSum * newReservoir.M;

		// Our *effective* candidate pool is the sum of our candidates plus those of our neighbors
		M += newReservoir.M;

		// Update the weight sum
		weightSum += risWeight;

		// Decide if we will randomly pick this sample
		bool selectSample = (random * weightSum <= risWeight);

		// If we did select this sample, update the relevant data
		if (selectSample)
		{
			sampleRef = newReservoir.sampleRef;
			targetPdf = newTargetPdf;
		}

		return selectSample;
	}

	// bool Update(RTXGI_SampleRef newSampleRef, float random, float risWeight)
	// {
	// 	// Update the weight sum
	// 	weightSum += risWeight;
	// 	// Add one sample to the counter
	// 	M += 1;
	// 	// Decide if we will randomly pick this sample
	// 	bool selectSample = (random * weightSum <= risWeight);

	// 	// If we did select this sample, update the relevant data.
	// 	// New samples don't have visibility or age information, we can skip that.
	// 	if (selectSample)
	// 	{
	// 		sampleRef = newSampleRef;
	// 		targetPdf = newTargetPdf;
	// 	}

	// 	return selectSample;
	// }

	// bool MergeReservoirs(RTXGI_Reservoir newReservoir,float random, float newTargetPdf )
	// {
	// 	uint M0 = M;
	// 	bool selectSample = Update(newReservoir.sampleRef, random, newTargetPdf * newReservoir.weightSum *newReservoir.M );
	// 	M = M0 + newReservoir.M;
	// 	return selectSample;
	// }
};
