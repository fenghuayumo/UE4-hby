#include "Common.ush"

ByteAddressBuffer g_CounterBuffer;
// Offset into counter buffer where this list's item count is stored
uint CounterOffset;

// A sort key that will end up at the end of the list; to be used to pad
// lists in LDS (always 2048 items).
//   Descending:  0x00000000
//   Ascending:   0xffffffff
// Also used by the ShouldSwap() function to invert ordering.
uint NullItem; 

// Takes Value and widens it by one bit at the location of the bit
// in the mask.  A one is inserted in the space.  OneBitMask must
// have one and only one bit set.
uint InsertOneBit( uint Value, uint OneBitMask )
{
    uint Mask = OneBitMask - 1;
    return (Value & ~Mask) << 1 | (Value & Mask) | OneBitMask;
}

// Determines if two sort keys should be swapped in the list.  NullItem is
// either 0 or 0xffffffff.  XOR with the NullItem will either invert the bits
// (effectively a negation) or leave the bits alone.  When the the NullItem is
// 0, we are sorting descending, so when A < B, they should swap.  For an
// ascending sort, ~A < ~B should swap.
bool ShouldSwap(uint A, uint B)
{
    return (A ^ NullItem) < (B ^ NullItem);
}

// Same as above, but only compares the upper 32-bit word.
bool ShouldSwap(uint2 A, uint2 B)
{
    return (A.y ^ NullItem) < (B.y ^ NullItem);
}

#if SORT_INDIRECT
RWByteAddressBuffer g_IndirectArgsBuffer;
uint MaxIterations;
uint NextPow2( uint Val )
{
    uint Mask = (1 << firstbithigh(Val)) - 1;
    return (Val + Mask) & ~Mask;
}

[numthreads(22, 1, 1)]
void BitonicSortInDirectArgs( uint GI : SV_GroupIndex )
{
    if (GI >= MaxIterations)
        return;

    uint ListCount = g_CounterBuffer.Load(CounterOffset);
    uint k = 2048 << GI;

    // We need one more iteration every time the number of thread groups doubles
    if (k > NextPow2((ListCount + 2047) & ~2047))
        ListCount = 0;

    uint PrevDispatches = GI * (GI + 1) / 2;
    uint Offset = 12 * PrevDispatches;

    // Generate outer sort dispatch arguments
    for (uint j = k / 2; j > 1024; j /= 2)
    {
        // All of the groups of size 2j that are full
        uint CompleteGroups = (ListCount & ~(2 * j - 1)) / 2048;

        // Remaining items must only be sorted if there are more than j of them
        uint PartialGroups = ((uint)max(int(ListCount - CompleteGroups * 2048 - j), 0) + 1023) / 1024;

        g_IndirectArgsBuffer.Store3(Offset, uint3(CompleteGroups + PartialGroups, 1, 1));

        Offset += 12;
    }

    // The inner sort always sorts all groups (rounded up to multiples of 2048)
    g_IndirectArgsBuffer.Store3(Offset, uint3((ListCount + 2047) / 2048, 1, 1));
}
#endif

#if SORT_PRE
RWByteAddressBuffer g_SortBuffer;

#if BITONICSORT_64BIT

groupshared uint gs_SortIndices[2048];
groupshared uint gs_SortKeys[2048];

void FillSortKey( uint Element, uint ListCount )
{
    // Unused elements must sort to the end
    if (Element < ListCount)
    {
        uint2 KeyIndexPair = g_SortBuffer.Load2(Element * 8);
        gs_SortKeys[Element & 2047] = KeyIndexPair.y;
        gs_SortIndices[Element & 2047] = KeyIndexPair.x;
    }
    else
    {
        gs_SortKeys[Element & 2047] = NullItem;
    }
}

void StoreKeyIndexPair( uint Element, uint ListCount)
{
    if (Element < ListCount)
        g_SortBuffer.Store2(Element * 8, uint2(gs_SortIndices[Element & 2047], gs_SortKeys[Element & 2047]));
}

#else // 32-bit packed key/index pairs

groupshared uint gs_SortKeys[2048];

void FillSortKey( uint Element, uint ListCount )
{
    // Unused elements must sort to the end
    gs_SortKeys[Element & 2047] = (Element < ListCount ? g_SortBuffer.Load(Element * 4) : NullItem);
}

void StoreKeyIndexPair( uint Element, uint ListCount )
{
    if (Element < ListCount)
        g_SortBuffer.Store(Element * 4, gs_SortKeys[Element & 2047]);
}

#endif

[numthreads(1024, 1, 1)]
void BitonicSortPre( uint3 Gid : SV_GroupID, uint GI : SV_GroupIndex )
{
    // Item index of the start of this group
    const uint GroupStart = Gid.x * 2048;

    // Actual number of items that need sorting
    const uint ListCount = g_CounterBuffer.Load(CounterOffset);

    FillSortKey(GroupStart + GI, ListCount);
    FillSortKey(GroupStart + GI + 1024, ListCount);

    GroupMemoryBarrierWithGroupSync();

    uint k;

    // This is better unrolled because it reduces ALU and because some
    // architectures can load/store two LDS items in a single instruction
    // as long as their separation is a compile-time constant.
    [unroll]
    for (k = 2; k <= 2048; k <<= 1)
    {
        //[unroll]
        for (uint j = k / 2; j > 0; j /= 2)
        {
            uint Index2 = InsertOneBit(GI, j);
            uint Index1 = Index2 ^ (k == 2 * j ? k - 1 : j);

            uint A = gs_SortKeys[Index1];
            uint B = gs_SortKeys[Index2];

            if (ShouldSwap(A, B))
            {
                // Swap the keys
                gs_SortKeys[Index1] = B;
                gs_SortKeys[Index2] = A;

#if BITONICSORT_64BIT
                // Then swap the indices (for 64-bit sorts)
                A = gs_SortIndices[Index1];
                B = gs_SortIndices[Index2];
                gs_SortIndices[Index1] = B;
                gs_SortIndices[Index2] = A;
#endif
            }

            GroupMemoryBarrierWithGroupSync();
        }
    }

    // Write sorted results to memory
    StoreKeyIndexPair(GroupStart + GI, ListCount);
    StoreKeyIndexPair(GroupStart + GI + 1024, ListCount);
}

#endif

#if INNER_SORT
RWByteAddressBuffer g_SortBuffer ;

uint k; // k >= 4096

#if BITONICSORT_64BIT

groupshared uint gs_SortKeys[2048];
groupshared uint gs_SortIndices[2048];

void LoadKeyIndexPair( uint Element, uint ListCount )
{
    uint2 KeyIndex = Element < ListCount ? g_SortBuffer.Load2(Element * 8) : NullItem;
    gs_SortIndices[Element & 2047] = KeyIndex.x;
    gs_SortKeys[Element & 2047] = KeyIndex.y;
}

void StoreKeyIndexPair( uint Element, uint ListCount )
{
    if (Element < ListCount)
        g_SortBuffer.Store2(Element * 8, uint2(gs_SortIndices[Element & 2047], gs_SortKeys[Element & 2047]));
}

#else // 32-bit packed key/index pairs

groupshared uint gs_SortKeys[2048];

void LoadKeyIndexPair( uint Element, uint ListCount )
{
    gs_SortKeys[Element & 2047] = Element < ListCount ? g_SortBuffer.Load(Element * 4) : NullItem;
}

void StoreKeyIndexPair( uint Element, uint ListCount )
{
    if (Element < ListCount)
        g_SortBuffer.Store(Element * 4, gs_SortKeys[Element & 2047]);
}

#endif

[numthreads(1024, 1, 1)]
void BitonicInnerSort( uint3 Gid : SV_GroupID, uint GI : SV_GroupIndex )
{
    const uint ListCount = g_CounterBuffer.Load(CounterOffset);

    // Item index of the start of this group
    const uint GroupStart = Gid.x * 2048;

    // Load from memory into LDS to prepare sort
    LoadKeyIndexPair(GroupStart + GI, ListCount);
    LoadKeyIndexPair(GroupStart + GI + 1024, ListCount);

    GroupMemoryBarrierWithGroupSync();

    // This is better unrolled because it reduces ALU and because some
    // architectures can load/store two LDS items in a single instruction
    // as long as their separation is a compile-time constant.
    [unroll]
    for (uint j = 1024; j > 0; j /= 2)
    {
        uint Index2 = InsertOneBit(GI, j);
        uint Index1 = Index2 ^ j;

        uint A = gs_SortKeys[Index1];
        uint B = gs_SortKeys[Index2];

        if (ShouldSwap(A, B))
        {
            // Swap the keys
            gs_SortKeys[Index1] = B;
            gs_SortKeys[Index2] = A;

#if BITONICSORT_64BIT
            // Then swap the indices (for 64-bit sorts)
            A = gs_SortIndices[Index1];
            B = gs_SortIndices[Index2];
            gs_SortIndices[Index1] = B;
            gs_SortIndices[Index2] = A;
#endif
        }

        GroupMemoryBarrierWithGroupSync();
    }

    StoreKeyIndexPair(GroupStart + GI, ListCount);
    StoreKeyIndexPair(GroupStart + GI + 1024, ListCount);
}
#endif

#ifdef OUT_SORT
RWByteAddressBuffer g_SortBuffer;

uint k;    // k >= 4096
uint j;    // j >= 2048 && j < k
#if BITONICSORT_64BIT
    #define Element uint2
    #define LoadElement(idx) g_SortBuffer.Load2(idx * 8)
    #define StoreElement(idx, elem) g_SortBuffer.Store2(idx * 8, elem)
#else
    #define Element uint
    #define LoadElement(idx) g_SortBuffer.Load(idx * 4)
    #define StoreElement(idx, elem) g_SortBuffer.Store(idx * 4, elem)
#endif

[numthreads(1024, 1, 1)]
void BitonicOuterSort( uint3 DTid : SV_DispatchThreadID  )
{
    const uint ListCount = g_CounterBuffer.Load(CounterOffset);

    // Form unique index pair from dispatch thread ID
    uint Index2 = InsertOneBit(DTid.x, j);
    uint Index1 = Index2 ^ (k == 2 * j ? k - 1 : j);

    if (Index2 >= ListCount)
        return;

    Element A = LoadElement(Index1);
    Element B = LoadElement(Index2);

    if (ShouldSwap(A, B))
    {
        StoreElement(Index1, B);
        StoreElement(Index2, A);
    }
}
#endif
