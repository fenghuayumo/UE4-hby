// Copyright Epic Games, Inc. All Rights Reserved.

#if GENERATE_REFLECTION_SAMPLES

#define RAY_TRACING_DEFERRED_REFLECTIONS_SHADER_VERSION 0xC1669BC2  // Change to force shader compilation of this shader

// EDeferredMaterialMode
#define DEFERRED_MATERIAL_MODE_NONE   0
#define DEFERRED_MATERIAL_MODE_GATHER 1
#define DEFERRED_MATERIAL_MODE_SHADE  2

#ifndef DIM_DEFERRED_MATERIAL_MODE
	#define DIM_DEFERRED_MATERIAL_MODE DEFERRED_MATERIAL_MODE_NONE
#endif

#include "../HairStrands/HairStrandsVoxelPageCommonStruct.ush"
#include "../Common.ush"

#define SUPPORT_CONTACT_SHADOWS		0
#define USE_SOURCE_TEXTURE			1
#define USE_SOURCE_TEXTURE_ARRAY	1

#define LTCMatTexture				RaytracingLightsDataPacked.LTCMatTexture
#define LTCMatSampler				GlobalBilinearClampedSampler
#define LTCAmpTexture				RaytracingLightsDataPacked.LTCAmpTexture
#define LTCAmpSampler				GlobalBilinearClampedSampler
#define PreIntegratedGF				ReflectionStruct.PreIntegratedGF
#define PreIntegratedGFSampler		GlobalBilinearClampedSampler

#include "../DeferredShadingCommon.ush"
#include "../DeferredLightingCommon.ush"
#include "../ReflectionEnvironmentShared.ush"
#include "../Montecarlo.ush"
#include "../PathTracing/Utilities/PathTracingRandomSequence.ush" 
#include "../HeightFogCommon.ush"
#include "../ScreenSpaceDenoise/SSDPublic.ush"
#include "../SobolRandom.ush"
#include "../SceneTextureParameters.ush"

#include "../RayTracing/RayTracingCommon.ush"
#include "../RayTracing/RayTracingDeferredShadingCommon.ush"
#include "../RayTracing/RayTracingLightingCommon.ush"
#include "../RayTracing/RayTracingReflectionsCommon.ush"
#include "../RayTracing/RayTracingDeferredMaterials.ush"
#include "../RayTracing/RayTracingDeferredReflections.ush"
#include "../RayTracing/RayTracingReflectionEnvironment.ush"

#include "ReservoirManagement.ush"

uint2 RayTracingResolution;
uint2 TileAlignedResolution;
float ReflectionMaxNormalBias;
float ReflectionSmoothBias;
float ReflectionMaxRoughness;
float AnyHitMaxRoughness;
float TextureMipBias;
float2 UpscaleFactor;
int   ShouldDoDirectLighting;
int   ShouldDoEmissiveAndIndirectLighting;
int   ShouldDoReflectionCaptures;
int   DenoisingOutputFormat; // 0: hit distance, 1: spatial resolve params (see RayTracingReflectionResolve.usf)
RWStructuredBuffer<FSortedReflectionRay>        RayBuffer;
RWStructuredBuffer<FDeferredMaterialPayload>    MaterialBuffer;
RWTexture2D<float4>                             ColorOutput;
RWTexture2D<float4>                             ReflectionDenoiserData;

RaytracingAccelerationStructure                 TLAS;

// Buffer of ray intersections aquired during Gather phase and 
// used during to reduce ray intersection overhead during Shading.
RWStructuredBuffer<FRayIntersectionBookmark>    BookmarkBuffer;

#if USE_SURFEL
#include "../SurfelGI/SurfelCommon.ush"
RWByteAddressBuffer SurfelMetaBuf;
RWByteAddressBuffer SurfelGridMetaBuf;

RWStructuredBuffer<uint> SurfelLifeBuf;
RWStructuredBuffer<uint> SurfelPoolBuf;
RWStructuredBuffer<SurfelVertexPacked> SurfelRePositionBuf;
RWStructuredBuffer<uint> SurfelRePositionCountBuf;
RWStructuredBuffer<SurfelVertexPacked> SurfelVertexBuf;
RWStructuredBuffer<float4> SurfelIrradianceBuf;
RWStructuredBuffer<uint> SurfelEntryCellBuf;

#include "../SurfelGI/SurfelLookUp.ush"
#endif


RAY_TRACING_ENTRY_RAYGEN(RayTracingDeferredReflectionsRGS)
{
	const uint DispatchThreadId = DispatchRaysIndex().x; // This shader is dispatched in 1D configuration

	FDeferredMaterialPayload DeferredMaterialPayload = (FDeferredMaterialPayload)0;
	DeferredMaterialPayload.SortKey = RAY_TRACING_DEFERRED_MATERIAL_KEY_INVALID;

#if DIM_DEFERRED_MATERIAL_MODE == DEFERRED_MATERIAL_MODE_GATHER

	FSortedReflectionRay ReflectionRay;
	{
		const uint  ThreadGroupSize  = REFLECTION_RAY_DIRECTION_SORT_TILE_SIZE * REFLECTION_RAY_DIRECTION_SORT_TILE_SIZE;
		const uint2 TileSize         = uint2(REFLECTION_RAY_DIRECTION_SORT_TILE_SIZE, REFLECTION_RAY_DIRECTION_SORT_TILE_SIZE);
		const uint  TileIndex        = DispatchThreadId / ThreadGroupSize;
		const uint  RayIndexInTile   = DispatchThreadId % ThreadGroupSize;
		const uint2 NumTiles         = TileAlignedResolution / TileSize;
		const uint2 TileBasePixelPos = uint2(TileIndex % NumTiles.x, TileIndex / NumTiles.x) * TileSize;
		const uint2 PixelPos         = View.ViewRectMin.xy + TileBasePixelPos + uint2(RayIndexInTile % TileSize.x, RayIndexInTile / TileSize.x);

		ReflectionRay = GenerateDeferredReflectionRay(PixelPos, UpscaleFactor, ReflectionMaxNormalBias, ReflectionSmoothBias);
		RayBuffer[DispatchThreadId] = ReflectionRay; // Store the ray to be used in shading phase
	}	

	DeferredMaterialPayload.PixelCoordinates = DispatchThreadId; // Store the sorted ray index, not packed 2D pixel coordinates
	const uint2 PixelPos = UnpackPixelCoordinates(ReflectionRay.PixelCoordinates);
	if (all(PixelPos - View.ViewRectMin.xy < RayTracingResolution))
	{
		RayDesc Ray;
		Ray.TMin      = 0;
		Ray.TMax      = 1e9;
		Ray.Origin    = ReflectionRay.Origin;
		Ray.Direction = ReflectionRay.GetDirection();

		DeferredMaterialPayload.SortKey = RAY_TRACING_DEFERRED_MATERIAL_KEY_RAY_MISS;
		FRayIntersectionBookmark Bookmark = (FRayIntersectionBookmark)0;

		float RoughnessFade = GetRoughnessFade(ReflectionRay.Roughness, ReflectionMaxRoughness);

		bool bIsValidPixel = RoughnessFade > 0;

		if (bIsValidPixel)
		{
			TraceDeferredMaterialGatherRay(TLAS,
				RAY_FLAG_FORCE_OPAQUE,
				RAY_TRACING_MASK_OPAQUE,
				Ray,
				Bookmark,
				DeferredMaterialPayload
			);
		}

		BookmarkBuffer[DispatchThreadId] = Bookmark;
	}

	MaterialBuffer[DispatchThreadId] = DeferredMaterialPayload;

#elif DIM_DEFERRED_MATERIAL_MODE == DEFERRED_MATERIAL_MODE_SHADE

	DeferredMaterialPayload = MaterialBuffer[DispatchThreadId];

	// Linear ray index is stored in PixelCoordinates (see DEFERRED_MATERIAL_MODE_GATHER above)
	const uint ReflectionRayIndex = DeferredMaterialPayload.PixelCoordinates;

	FSortedReflectionRay ReflectionRay = RayBuffer[ReflectionRayIndex];
	const uint2 PixelPos = UnpackPixelCoordinates(ReflectionRay.PixelCoordinates);
	if (any(PixelPos - View.ViewRectMin.xy >= RayTracingResolution))
	{
		return;
	}

	const bool bSkyLightAffectReflection = ShouldSkyLightAffectReflection();
	// const bool bSkyLightAffectReflection = true;
	float4 ResultColor    = (float4)0;
	// Unify miss condition with RayTracingReflections.usf
	//float ResultDistance = DENOISER_MISS_HIT_DISTANCE;
	//float ResultDistance = DENOISER_INVALID_HIT_DISTANCE;
	float ResultDistance = 1.0e20;

	FPackedMaterialClosestHitPayload PackedPayload = (FPackedMaterialClosestHitPayload)0;
	float3 RayHitWorldPos = ReflectionRay.Origin + ReflectionRay.GetDirection() * DENOISER_MISS_HIT_DISTANCE;
    
    float2 SvPosition = floor(float2(PixelPos) * UpscaleFactor);
	const float2 BufferUV = (SvPosition + 0.5) * View.BufferSizeAndInvSize.zw;

    // not 'const', may need to be modified below
	FGBufferData GBufferData         = GetGBufferDataFromSceneTextures(BufferUV);
    Reservoir state = Reservoir::Empty();

	if (DeferredMaterialPayload.SortKey < RAY_TRACING_DEFERRED_MATERIAL_KEY_RAY_MISS)
	{
        Reservoir LocalReservoir = Reservoir::Empty();
        SampleRef sampleRef;
		RayDesc Ray;
		Ray.TMin      = 0;
		Ray.TMax      = 1e9;
		Ray.Origin    = ReflectionRay.Origin;
		Ray.Direction = ReflectionRay.GetDirection();

		FRayIntersectionBookmark Bookmark = BookmarkBuffer[DeferredMaterialPayload.PixelCoordinates];

		if (bSkyLightAffectReflection)
		{
			PackedPayload.SetEnableSkyLightContribution();
		}
		PackedPayload.SetPixelCoord(PixelPos);
		PackedPayload.SetMipBias(TextureMipBias);

		TraceDeferredMaterialShadingRay(
			TLAS,
			RAY_FLAG_FORCE_OPAQUE,
			RAY_TRACING_MASK_OPAQUE,
			Ray,
			Bookmark,
			PackedPayload);

		const bool bTopLayerRayTraceSkyLightContribution = false;

		// If the closest surface that we found during material gather is transparent,
		// we can trace another ray that performs full traversal and masked material evaluation.
		// The assumption here is that majority of the rays will actually hit opaque surfaces and
		// the win from skipping AHS invocations during initial traversal will lead to overall win on average.
		if ((!PackedPayload.IsHit() || PackedPayload.GetOpacity() == 0) 
			&& ReflectionRay.Roughness <= AnyHitMaxRoughness)
		{
			FRayCone RayCone = (FRayCone)0;
			TraceMaterialRayPacked(
				PackedPayload,
				TLAS,
				0, // RayFlags
				RAY_TRACING_MASK_OPAQUE,
				Ray,
				RayCone,
				PixelPos,
				bTopLayerRayTraceSkyLightContribution);
		}

		if (PackedPayload.IsHit())
		{
			bool bShouldDoDirectLighting               = ShouldDoDirectLighting != 0;
			bool bShouldDoEmissiveAndIndirectLighting  = ShouldDoEmissiveAndIndirectLighting != 0;
			bool bDecoupleSampleGeneration             = false;
			uint ReflectedShadowsType                  = 1; // Hard shadows
			
			RandomSequence RandSequence = (RandomSequence) 0; // Not actually used, since hard shadows are forced
            RandomSequence_Initialize(RandSequence, PixelPos, 0, View.StateFrameIndex, 1);
			
            float3 LightingViewDirection = Ray.Direction;
			RayHitWorldPos = Ray.Origin + Ray.Direction * PackedPayload.HitT;
            FMaterialClosestHitPayload Payload = UnpackRayTracingPayload(PackedPayload, Ray);
            {
                sampleRef.CreationPoint = ReflectionRay.Origin;
                sampleRef.CreationNormal = GBufferData.WorldNormal;
                sampleRef.Position = RayHitWorldPos;
                sampleRef.Normal = Payload.WorldNormal;
		    }

			FRayCone RayCone = (FRayCone)0; // Not used

			AccumulateResults(
				PackedPayload,
				RayHitWorldPos,
				LightingViewDirection,
				TLAS,
				RandSequence,
				PixelPos,
				ReflectionMaxNormalBias,
				ReflectedShadowsType,
				bShouldDoDirectLighting,
				bShouldDoEmissiveAndIndirectLighting,
				bTopLayerRayTraceSkyLightContribution,
				bDecoupleSampleGeneration,
				RayCone,
				ResultColor.rgb);

		// 	FGBufferData GBufferData = (FGBufferData)0;
		// 	GBufferData.Depth = 1.f; // Do not use depth
		// 	GBufferData.WorldNormal = Payload.WorldNormal;
		// 	GBufferData.BaseColor = Payload.BaseColor;
		// 	GBufferData.CustomData = Payload.CustomData;
		// 	GBufferData.GBufferAO = Payload.GBufferAO;
		// 	GBufferData.IndirectIrradiance = (Payload.IndirectIrradiance.x + Payload.IndirectIrradiance.y + Payload.IndirectIrradiance.z) / 3.f;
		// 	GBufferData.SpecularColor = Payload.SpecularColor;
		// 	GBufferData.DiffuseColor = Payload.DiffuseColor;
		// 	GBufferData.Metallic = Payload.Metallic;
		// 	GBufferData.Specular = Payload.Specular;
		// 	GBufferData.Roughness = Payload.Roughness;
		// 	GBufferData.ShadingModelID = Payload.ShadingModelID;
		// 	GBufferData.CustomData = Payload.CustomData;

		// 	const uint NextEventEstimationSamples = 8;
		// 	float SplitFactor = 1.0 / NextEventEstimationSamples;
		// 	for (uint NeeTrial = 0; NeeTrial < NextEventEstimationSamples; ++NeeTrial)
		// 	{
		// 		// Light selection
		// 		int LightId;
		// 		float3 LightRadianceOverPdf = 0;
		// 		float NeePdf = 0.0;

		// 		float3 RandSample3 = RandomSequence_GenerateSample3D(RandSequence);

		// 		RayDesc LightRay;
		// 		if (SampleLight(RandSample3,
		// 						RayHitWorldPos,
		// 						Payload.WorldNormal,
		// 						Payload.PrimitiveLightingChannelMask,
		// 						ENABLE_TRANSMISSION,
		// 						LightId,
		// 						LightRay.Direction,
		// 						LightRay.TMax,
		// 						LightRadianceOverPdf,
		// 						NeePdf))
		// 		{
		// 			LightRay.Origin = RayHitWorldPos;
		// 			LightRay.TMin = 0;
		// 			LightRay.TMax = min(LightRay.TMax, 1e27);
		// 			bool bTransmission = HasTransmission(LightId);
		// 			float3 BiasNormal = Payload.WorldNormal;
		// 			if (bTransmission && dot(BiasNormal, LightRay.Direction) < 0.0)
		// 			{
		// 				BiasNormal = -BiasNormal;
		// 			}
		// 			ApplyPositionBias(LightRay, BiasNormal, ReflectionMaxNormalBias);

		// 			// Trace visibility ray
		// 			uint NeeRayFlags = RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER;
		// 			const uint NeeInstanceInclusionMask = RAY_TRACING_MASK_OPAQUE;

		// #if !ENABLE_TWO_SIDED_GEOMETRY
		// 			NeeRayFlags |= RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
		// #endif

		// 			FMinimalPayload NeePayload = TraceVisibilityRay(
		// 				TLAS,
		// 				NeeRayFlags,
		// 				NeeInstanceInclusionMask,
		// 				SvPosition,
		// 				LightRay);

		// 			// No hit indicates successful next-event connection
		// 			if (NeePayload.IsMiss())
		// 			{
		// 				// Evaluate material
		// 				half3 N = Payload.WorldNormal;
		// 				half3 V = -Ray.Direction;
		// 				half3 L = LightRay.Direction;
		// 				float NoL = saturate(dot(N, L));
		// 				FShadowTerms ShadowTerms = { 0.0, 0.0, 0.0, InitHairTransmittanceData() };
		// 				FDirectLighting LightingSample = EvaluateBxDF(GBufferData, N, V, L, NoL, ShadowTerms);
		// 				float3 MaterialThroughput = LightingSample.Specular + LightingSample.Diffuse;

		// 				// Record the contribution
		// 				float3 ExitantRadianceSample =  LightRadianceOverPdf * MaterialThroughput * SplitFactor / ReflectionRay.Pdf;
		// 				ResultColor.rgb += isfinite(ExitantRadianceSample) ? ExitantRadianceSample : 0.0;
		// 			}
		// 		}
		// 	}

#if USE_SURFEL
			ResultColor.rgb += PackedPayload.GetDiffuseColor()   * GetSurfelGI(RayHitWorldPos, PackedPayload.GetWorldNormal(),0, RandSequence );
#endif
			if (ShouldDoReflectionCaptures != 0)
			{
				float3 R = reflect(Ray.Direction, PackedPayload.GetWorldNormal());
				const float NoV = saturate(dot(-Ray.Direction, PackedPayload.GetWorldNormal()));
				const float Roughness = PackedPayload.GetRoughness();
				const float RoughnessSq = Roughness * Roughness;
				const float SpecularOcclusion = GetSpecularOcclusion(NoV, RoughnessSq, 1.0);
				ResultColor.rgb += EnvBRDF(PackedPayload.GetSpecularColor(), Roughness, NoV) * SpecularOcclusion *
					CompositeReflectionCapturesAndSkylight(
						1.0, // CompositeAlpha
						RayHitWorldPos,
						R,
						Roughness,
						0.0, // IndirectIrradiance,
						1.0, // IndirectSpecularOcclusion
						0.0, // ExtraIndirectSpecular
						ForwardLightData.NumReflectionCaptures,
						0, // ReflectionCapturesStartIndex
						0,
						bSkyLightAffectReflection);
			}

			ResultColor.rgb *= View.PreExposure;
	
			float RoughnessFade = GetRoughnessFade(ReflectionRay.Roughness, ReflectionMaxRoughness);
			ResultColor.rgb *= RoughnessFade;
			ResultColor.a = RoughnessFade;
			ResultDistance = PackedPayload.HitT;
            
			sampleRef.Irradiance = ResultColor.xyz;
			float RayPdf = ReflectionRay.Pdf > 0 ? ReflectionRay.Pdf : 0.0;
			float InvRayPdf = RayPdf > 0 ? min(1.0 / RayPdf, 65504) : 0.0;

            float targetPdf = Luminance(sampleRef.Irradiance) * RayPdf;
            float invSourcePdf =  InvRayPdf;
	
            float risRnd =  RandomSequence_GenerateSample1D(RandSequence);

            // LocalReservoir.StreamSample(sampleRef, risRnd, targetPdf, invSourcePdf);
			LocalReservoir.M = 1;
			LocalReservoir.weightSum = invSourcePdf;
			LocalReservoir.targetPdf = targetPdf;
			LocalReservoir.sampleRef = sampleRef;
			LocalReservoir.sourcePdf = RayPdf;

		}

		// LocalReservoir.FinalizeResampling(1.0, LocalReservoir.M);
		// LocalReservoir.M = 1;

		state = LocalReservoir;
	}

    // float RoughnessFade = GetRoughnessFade(ReflectionRay.Roughness, ReflectionMaxRoughness);
	ColorOutput[PixelPos] = ResultColor;

	float4 RayParams = (float4)0;

	const float FP16Max = 65504.0;
	float ClampedHitDistance = (ResultDistance == DENOISER_MISS_HIT_DISTANCE) ? FP16Max : min(ResultDistance, FP16Max); // Clamp to fit into FP16
	RayParams.xyz = ReflectionRay.GetDirection() * ClampedHitDistance;
	RayParams.w  = ReflectionRay.Pdf > 0 ? min(1.0 / ReflectionRay.Pdf, FP16Max) : 0;

	// NOTE: Written a ternary operator to work around shader compiler crash as of 2020-11-19
	ReflectionDenoiserData[PixelPos] = DenoisingOutputFormat == 1 ? RayParams : (float4)ResultDistance;
	WriteReservoirData(PixelPos, 0, state.Store());
#endif // DIM_DEFERRED_MATERIAL_MODE
}


#endif //GENERATE_REFLECTION_SAMPLES