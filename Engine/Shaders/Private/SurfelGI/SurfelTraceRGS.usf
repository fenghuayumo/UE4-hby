#ifdef PRE_DISPATCH_TRACE

ByteAddressBuffer SurfelMetaBuf;
RWByteAddressBuffer DispatchArgs;

[numthreads(1, 1, 1)]
void PreDispatchTrace() 
{
    const uint surfel_count = SurfelMetaBuf.Load(sizeof(uint) * 1);
    DispatchArgs.Store4(0, uint4(surfel_count, 1, 1, 0));
}

#endif

#ifdef SURFEL_TRACE


#define USE_IES_TERM 0 // this shader doesn't bind the IES atlas, so disable the IES term from path tracer lights
#include "../Common.ush"

#include "../RectLight.ush"
//#include "../MonteCarlo.ush"
#include "../DeferredShadingCommon.ush"
#include "../ShadingModels.ush"
#include "../SceneTextureParameters.ush"
#include "../RayTracing/RayTracingCommon.ush"

#include "../RayTracing/RayTracingDeferredShadingCommon.ush"
#include "../RayTracing/RayTracingHitGroupCommon.ush"

#include "../RayTracing/RayTracingTimingCommon.ush"

// #define LIGHT_GRID 1
// #define LIGHT_TREE 2
// #define LIGHT_CUT  3
// #define LIGHT_UNIFROM 4

// // #define LIGHT_SAMPLING_TYPE 1
// #ifndef LIGHT_SAMPLING_TYPE
// #define LIGHT_SAMPLING_TYPE 1
// #endif

// #if LIGHT_SAMPLING_TYPE == LIGHT_UNIFROM
// #define UNIFORM_LIGHT_SELECTION
// #endif
// #if LIGHT_SAMPLING_TYPE == LIGHT_GRID
// #define USE_PATH_TRACING_LIGHT_GRID 1
// #else
// #define USE_PATH_TRACING_LIGHT_GRID 0
// #endif

#include "../PathTracing/Material/PathTracingMaterialSampling.ush"
#include "../PathTracing/Utilities/PathTracingRandomSequence.ush"
// #include "../PathTracing/Light/PathTracingLightGrid.ush"
#include "../PathTracing/Light/PathTracingLightSampling.ush"

#include "SurfelCommon.ush"

RaytracingAccelerationStructure TLAS;


uint SamplesPerPixel;
uint MaxBounces;
uint UpscaleFactor;
float MaxRayDistanceForGI;
float MaxRayDistanceForAO;
float MaxShadowDistance;
float NextEventEstimationSamples;
float DiffuseThreshold;
uint EvalSkyLight;
uint UseRussianRoulette;
uint UseFireflySuppression;
float MaxNormalBias;
uint RenderTileOffsetX;
uint RenderTileOffsetY;
uint AccumulateEmissive;

RWByteAddressBuffer SurfelMetaBuf;
RWByteAddressBuffer SurfelGridMetaBuf;
RWStructuredBuffer<float4> SurfelAuxiBuf; //0 : prev irradiance, 1 : varaicne related variable

RWStructuredBuffer<uint> SurfelLifeBuf;
RWStructuredBuffer<uint> SurfelPoolBuf;
RWStructuredBuffer<SurfelVertexPacked> SurfelRePositionBuf;
RWStructuredBuffer<uint> SurfelRePositionCountBuf;
RWStructuredBuffer<SurfelVertexPacked> SurfelVertexBuf;
RWStructuredBuffer<float4> SurfelIrradianceBuf;
RWStructuredBuffer<uint> SurfelEntryCellBuf;

#include "SurfelLookUp.ush"

void GenerateCosineNormalRay(
	float3 WorldPosition,
	float3 WorldNormal,
	float2 RandSample,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
)
{
	// Perform cosine-hemispherical sampling and convert to world-space
	float4 Direction_Tangent = CosineSampleHemisphere(RandSample);
	float3 Direction_World = TangentToWorld(Direction_Tangent.xyz, WorldNormal);

	RayOrigin = WorldPosition;
	RayDirection = Direction_World;
	RayTMin = 0.01;
	RayTMax = max(MaxRayDistanceForGI, MaxRayDistanceForAO);
	RayPdf = Direction_Tangent.w;
}


#define TARGET_SAMPLE_COUNT 128
static const uint SHORT_ESTIMATOR_SAMPLE_COUNT = 4;

RAY_TRACING_ENTRY_RAYGEN(SurfelTraceRGS)
{
	const uint SurfelIndex = DispatchRaysIndex().x;
	const uint SurfelCount = SurfelMetaBuf.Load(SURFEL_META_ENTRY_COUNT);

	const uint life = SurfelLifeBuf[SurfelIndex];

	if( SurfelIndex >= SurfelCount || !IsSurfelLifeValid(life) )
		return ;
	
	#if USE_DYNAMIC_TRACE_ORIGIN
        const SurfelVertex surfel = UnPackVertex(SurfRePositionBuf[SurfelIndex]);
    #else
        const SurfelVertex surfel = UnPackVertex(SurfelVertexBuf[SurfelIndex]);
    #endif


	uint2 PixelCoord = uint2(SurfelIndex % 2048, SurfelIndex / 2048 );
    // float4 PrevRadiancePacked = min(SurfelIrradianceBuf[SurfelIndex], TARGET_SAMPLE_COUNT);

	const float4 PrevTotalRadiancePacked = SurfelAuxiBuf[SurfelIndex * 2 + 0];


	// float3 DiffuseColor = surfel.DiffuseColor;
	// if (Luminance(DiffuseColor) < DiffuseThreshold)
	// {
	// 	return;
	// }

	// uint  SampleCount = 4;
    float  ValidSampleCount = 0;
	float3 Irradiance = 0;
	float3 Sample0Irradiance = 0.0;

    for (uint SampleIndex = 0; SampleIndex < SamplesPerPixel; ++SampleIndex)
	{
        ValidSampleCount += 1.0;

		RandomSequence RandSequence;
		RandomSequence_Initialize(RandSequence, PixelCoord, SampleIndex, View.StateFrameIndex, SamplesPerPixel);

		float3 RayThroughput = 1.0;
		float3 RandSample = RandomSequence_GenerateSample3D(RandSequence);
		
		// if (UseRussianRoulette)
		// {
		// 	float RRSample = RandSample.x;
		// 	float ProbabilityOfSuccess = Luminance(DiffuseColor);
		// 	float ProbabilityOfTermination = 1.0 - ProbabilityOfSuccess;
		// 	if (RRSample < ProbabilityOfTermination) continue;
		// 	RayThroughput /= ProbabilityOfSuccess;
		// }

    	const uint SequenceIdx = hash1(SurfelIndex) + SampleIndex + View.StateFrameIndex * SamplesPerPixel;
		const float2 Rand2 = r2_sequence(SequenceIdx % max(128, TARGET_SAMPLE_COUNT));
		
		RayDesc Ray;
		float RayPdf = 1.0;
		GenerateCosineNormalRay(surfel.Position, surfel.Normal, Rand2, Ray.Origin, Ray.Direction, Ray.TMin, Ray.TMax, RayPdf);
		RayThroughput *=  saturate(dot(surfel.Normal, Ray.Direction)) / PI;
		//RayPdf = 1.0;
		
		float MaterialPdf = 0.0;
		uint Bounce = 0;
		while (Bounce < 1)
		{
			// Cast ray
			uint RayFlags = 0;
			const uint InstanceInclusionMask = RAY_TRACING_MASK_OPAQUE;
			const bool bEnableSkyLightContribution = true;
			const bool bIgnoreTranslucentMaterials = false;

#if !ENABLE_TWO_SIDED_GEOMETRY
			RayFlags |= RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
#endif

			FRayCone RayCone = (FRayCone)0;
			FMaterialClosestHitPayload Payload = TraceMaterialRay(
				TLAS,
				RayFlags,
				InstanceInclusionMask,
				Ray,
				RayCone,
				PixelCoord,
				bEnableSkyLightContribution,
				bIgnoreTranslucentMaterials);

			// Environment hit
			if (Payload.IsMiss())
			{
				// Optional multi-bounce SkyLight contribution
				if (EvalSkyLight && Bounce > 0)
				{
					uint SkyLightId = 0;
					RayDesc LightRay = Ray;
					LightRay.TMax = POSITIVE_INFINITY;
					float3 EnvironmentRadiance = SkyLight_TraceLight(Ray, SkyLightId).Radiance;
					Irradiance += EnvironmentRadiance * RayThroughput / RayPdf;
				}
				break;
			}

			// if (Bounce == 0)
			// {
			// }
			if (Payload.HitT > MaxRayDistanceForGI) break;

			// Update intersection
			Ray.Origin += Ray.Direction * Payload.HitT;

			// Create faux GBuffer to use with EvaluateBxDF
			FGBufferData GBufferData = (FGBufferData)0;
			GBufferData.Depth = 1.f; // Do not use depth
			GBufferData.WorldNormal = Payload.WorldNormal;
			GBufferData.BaseColor = Payload.BaseColor;
			GBufferData.CustomData = Payload.CustomData;
			GBufferData.GBufferAO = Payload.GBufferAO;
			GBufferData.IndirectIrradiance = (Payload.IndirectIrradiance.x + Payload.IndirectIrradiance.y + Payload.IndirectIrradiance.z) / 3.f;
			GBufferData.SpecularColor = Payload.SpecularColor;
			GBufferData.DiffuseColor = Payload.DiffuseColor;			
			GBufferData.Metallic = Payload.Metallic;
			GBufferData.Specular = Payload.Specular;
			GBufferData.Roughness = Payload.Roughness;
			GBufferData.ShadingModelID = Payload.ShadingModelID;
			GBufferData.CustomData = Payload.CustomData;

#if !MESH_LIGHT_SAMPLING
			// if (AccumulateEmissive)
			// {
			// 	Irradiance += Payload.Radiance * RayThroughput / RayPdf;
			// }
#endif
			float SplitFactor = 1.0 / NextEventEstimationSamples;
			for (uint NeeID = 0; NeeID < NextEventEstimationSamples; ++NeeID)
			{
				// Light selection
				int LightId;
				float3 LightRadianceOverPdf = 0;
				float NeePdf = 0.0;

				float3 RandSample3 = RandomSequence_GenerateSample3D(RandSequence);
				RayDesc LightRay;

				bool bLit = SampleLight(RandSample3,
						Ray.Origin,
						Payload.WorldNormal,
						Payload.PrimitiveLightingChannelMask,
						ENABLE_TRANSMISSION,
						LightId,
						LightRay.Direction,
						LightRay.TMax,
						LightRadianceOverPdf,
						NeePdf);

				if (bLit)
				{
					LightRay.Origin = Ray.Origin;
					LightRay.TMin = 0;
					LightRay.TMax = min(LightRay.TMax, MaxShadowDistance);
					bool bTransmission = HasTransmission(LightId);
					float3 BiasNormal = Payload.WorldNormal;
					if (bTransmission && dot(BiasNormal, LightRay.Direction) < 0.0)
					{
						BiasNormal = -BiasNormal;
					}
					ApplyPositionBias(LightRay, BiasNormal, MaxNormalBias);

					// Trace visibility ray
					uint NeeRayFlags = RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER;
					const uint NeeInstanceInclusionMask = RAY_TRACING_MASK_OPAQUE;

#if !ENABLE_TWO_SIDED_GEOMETRY
					NeeRayFlags |= RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
#endif

					FMinimalPayload NeePayload = TraceVisibilityRay(
						TLAS,
						NeeRayFlags,
						NeeInstanceInclusionMask,
						PixelCoord,
						LightRay);

					// No hit indicates successful next-event connection
					if (NeePayload.IsMiss())
					{
						// Evaluate material
						float3 MaterialThroughput;

						half3 N = Payload.WorldNormal;
						half3 V = -Ray.Direction;
						half3 L = LightRay.Direction;
						float NoL = saturate(dot(N, L));
						FShadowTerms ShadowTerms = { 0.0, 0.0, 0.0, InitHairTransmittanceData() };
						FDirectLighting LightingSample = EvaluateBxDF(GBufferData, N, V, L, NoL, ShadowTerms);
						MaterialThroughput = LightingSample.Diffuse;
						if (bTransmission)
						{
							MaterialThroughput += LightingSample.Transmission;
						}

						// Record the contribution
						float3 ExitantRadianceSample = LightRadianceOverPdf * MaterialThroughput * RayThroughput * SplitFactor / RayPdf;

						// Tonemap for firefly suppression
						if (UseFireflySuppression)
						{
							ExitantRadianceSample *= rcp(1.0 + Luminance(ExitantRadianceSample));
						}

						Irradiance += isfinite(ExitantRadianceSample) ? ExitantRadianceSample : 0.0;
					}
				}
			}

			// Perform material sampling
			// if (Bounce + 1 < MaxBounces)
			// {
			// 	float3 Direction;
			// 	float3 Throughput = 1.0;
			// 	float3 RandSample3 = RandomSequence_GenerateSample3D(RandSequence);

			// 	float3 RayOrigin = Ray.Origin;
			// 	GenerateCosineNormalRay(RayOrigin, Payload.WorldNormal, RandSample3.xy, Ray.Origin, Direction, Ray.TMin, Ray.TMax, MaterialPdf);
				
			// 	half3 N = Payload.WorldNormal;
			// 	half3 V = -Ray.Direction;
			// 	half3 L = Direction;
			// 	float NoL = saturate(dot(N, L));
			// 	FShadowTerms ShadowTerms = { 0.0, 0.0, 0.0, InitHairTransmittanceData() };
			// 	FDirectLighting LightingSample = EvaluateBxDF(GBufferData, N, V, L, NoL, ShadowTerms);
			// 	Throughput = LightingSample.Diffuse;
			// 	if (MaterialPdf <= 0.0)
			// 	{
			// 		break;
			// 	}

			// 	// Update ray
			// 	Ray.Direction = Direction;
			// 	RayThroughput *= Throughput;
			// 	RayPdf *= MaterialPdf;
			// }
#if USE_SURFEL
			{
                Irradiance += GetSurfelGI(Ray.Origin, Payload.WorldNormal, 1 + SurfelLifeToRank(life), RandSequence) * GBufferData.DiffuseColor;
            }
#endif
			Bounce++;
		}

		if( SampleIndex == 0 )
			Sample0Irradiance = Irradiance;
	}

	
	//if (SamplesPerPixel > 0)
	{
		Irradiance /= ValidSampleCount;
		// Tonemap inversion for firefly suppression
		if (UseFireflySuppression)
		{
			Irradiance *= rcp(1 - Luminance(Irradiance));
		}
	}

	const float IrradianceLum = Luminance(Irradiance);

    const float4 PrevAux = SurfelAuxiBuf[SurfelIndex * 2 + 1];
    const float PrevLuminance = PrevAux.x;
    const float2 PrevExEx2 = PrevAux.zw;

	const float2 SampleExEX2 = float2(IrradianceLum, IrradianceLum * IrradianceLum);
    const float2 BlendExEX2 = lerp(PrevExEx2, SampleExEX2, 1.0 / (1.0 + clamp(PrevTotalRadiancePacked.w, 1, SHORT_ESTIMATOR_SAMPLE_COUNT)));

    const float4 NewAux = float4(
        Luminance(Sample0Irradiance),
        lerp(PrevAux.y, IrradianceLum, 1.0 / (1.0 + clamp(PrevTotalRadiancePacked.w, 2, 2 * SHORT_ESTIMATOR_SAMPLE_COUNT))),
        BlendExEX2
    );
    SurfelAuxiBuf[SurfelIndex * 2 + 1] = NewAux;

    const float LumVariance = max(0.0, BlendExEX2.y - BlendExEX2.x * BlendExEX2.x);
    const float LumDev = sqrt(LumVariance);

    float PrevSampleCount = min(PrevTotalRadiancePacked.w, TARGET_SAMPLE_COUNT);

    const float4 prevIrradPacked = SurfelIrradianceBuf[SurfelIndex];
    const float3 PrevIrradiance = prevIrradPacked.xyz;

	//dead surfel
    if (0 == prevIrradPacked.w) 
        PrevSampleCount = 0;

    const float TotalSampleCount = PrevSampleCount + ValidSampleCount;
    float BlendFactorNew = ValidSampleCount / max(1, TotalSampleCount);

    // Forecasting mean
    const float QuickLumEx = min(BlendExEX2.x * 1.2, lerp(NewAux.y, BlendExEX2.x, 1.5));
    const float3 PrevValue = PrevTotalRadiancePacked.rgb;
    const float3 BlendValue = lerp( PrevValue, Irradiance, BlendFactorNew);

    SurfelAuxiBuf[SurfelIndex * 2 + 0] = max(0.0, float4(
        BlendValue,
        TotalSampleCount
    ));

    const float k = 0.5;

    SurfelIrradianceBuf[SurfelIndex] = max(0.0, float4(
            pow(lerp(pow(max(0.0, PrevIrradiance), k),pow(max(0.0, BlendValue), k),0.25),1.0 / k),
        TotalSampleCount
    ));

	// const float TotalSampleCount = PrevRadiancePacked.w + ValidSampleCount;
    // const float BlendFactorNew = ValidSampleCount / max(1, TotalSampleCount);

    // float3 PrevValue = PrevRadiancePacked.rgb;
	// Irradiance = ClampToHalfFloatRange(Irradiance);

    // Irradiance = lerp(PrevValue, Irradiance, BlendFactorNew);

	// SurfelIrradianceBuf[SurfelIndex] = max(0.0, float4(Irradiance,TotalSampleCount));
}

#endif