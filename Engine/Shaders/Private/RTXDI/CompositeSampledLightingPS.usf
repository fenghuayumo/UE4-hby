/*
* Copyright (c) 2021 NVIDIA CORPORATION.  All rights reserved.
*
* NVIDIA Corporation and its licensors retain all intellectual property and proprietary
* rights in and to this software, related documentation and any modifications thereto.
* Any use, reproduction, disclosure or distribution of this software and related
* documentation without an express license agreement from NVIDIA Corporation is strictly
* prohibited.
*
* TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
* INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
* PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS BE LIABLE FOR ANY
* SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
* LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
* BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR
* INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF
* SUCH DAMAGES.
*/

#include "../Common.ush"
#include "../DeferredShadingCommon.ush"

Texture2D Diffuse;
Texture2D Specular;
SamplerState InputSampler;
int ApplyDiffuse;
int ApplySpecular;

int ModulateMaterials;


float4 CompositeSampledLightingPS(
	noperspective float4 UVAndScreenPos : TEXCOORD0
	) : SV_Target0
{
	float2 UV = UVAndScreenPos.xy;

	FGBufferData GBuffer = GetGBufferData(UV);

	float3 Radiance = 0.0f;
	float Subsurface = 0.0f;

	const bool bModulateMaterials = ModulateMaterials && GBuffer.ShadingModelID != SHADINGMODELID_HAIR;

	if (ApplyDiffuse)
	{
		float3 DiffuseColor = bModulateMaterials ? GBuffer.DiffuseColor : float3(1.0f, 1.0f, 1.0f);
		float3 DiffuseResult = Texture2DSample(Diffuse, InputSampler, UV).xyz * DiffuseColor;
		Radiance += DiffuseResult;
		Subsurface += Luminance(DiffuseResult);
	}

	if (ApplySpecular)
	{
		float3 SpecularColor = bModulateMaterials ? GBuffer.SpecularColor : float3(1.0, 1.0, 1.0);
		Radiance += Texture2DSample(Specular, InputSampler, UV).xyz * SpecularColor;
	}

	return float4(Radiance, Subsurface);
}
